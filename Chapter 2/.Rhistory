DimWeight = dataset$weight[-10,]
DimWeight = dataset$weight[-10,.]
DimWeight = dataset$weight[-10]
LsitIndex = list(10,85)
ListIndex = list(10,85)
View(ListIndex)
View(ListIndex)
DimWeight = dataset$weight[-c(10,85)]
DimWeight = dataset$acceleration[-c(10,85)]
DimAcceleration = dataset$acceleration[-c(10,85)]
NewData = dataset[-c(10,85)]
NewData = dataset[-c(10,85),]
NewData = dataset[-c(10,85),]
range(NewData$acceleration)
mean(NewData$acceleration)
sd(NewData$acceleration)
range(NewData$weight)
mean(NewData$weight)
sd(NewData$weight)
pairs(dataset)
pairs(~ mpg + displacement+horsepower+acceleration,dataset)
names(dataset)
dataset$cylinders = as.factor(dataset$cylinders)
plot(y = dataset$mpg,x = dataset$cylinders)
pairs(~ mpg + weight+year+origin,dataset)
dataset$cylinders = as.factor(dataset$cylinders)
dataset$year = as.factor(dataset$year)
dataset$origin = as.factor(dataset$origin)
plot(y = dataset$mpg,x = dataset$cylinders)
pairs(~ mpg + weight+year+origin,dataset)
plot(y = dataset$mpg,x = dataset$weight)
plot(y = dataset$mpg,x = dataset$year)
plot(y = dataset$mpg,x = dataset$origin)
pairs(~ mpg + displacement+horsepower+acceleration,dataset)
plot(y = dataset$mpg,x = dataset$acceleration)
sapply(dataset[,c(1,3,4,5,6,7)],range) #sapply applies function over a list or vector
sapply(dataset[,1:7],range) #sapply applies function over a list or vector
#Chapter 2 - Exercises part 2
dataset = read.table("Auto.Data",header = TRUE, na.strings = "?")
#in dataset with missing values, there are ways to deal with these kind of error, one is simply omit them
dataset = na.omit(dataset)
sapply(dataset[,1:7],range) #sapply applies function over a list or vector
sapply(dataset[,-c(2,8,9)],range) #sapply applies function over a list or vector
sapply(dataset[,-c(2,8,9)],mean) #sapply applies function over a list or vector
sapply(dataset[,-c(2,8,9)],sd) #sapply applies function over a list or vector
sapply(NewData[,-c(2,8,9)],range) #sapply applies function over a list or vector
sapply(NewData[,-c(2,8,9)],mean) #sapply applies function over a list or vector
sapply(NewData[,-c(2,8,9)],sd) #sapply applies function over a list or vector
sapply(dataset[,-c(2,7,8,9)],range) #sapply applies function over a list or vector
sapply(dataset[,-c(2,7,8,9)],mean)
sapply(dataset[,-c(2,7,8,9)],sd)
NewData = dataset[-c(10,85),]
sapply(NewData[,-c(2,7,8,9)],range)
sapply(NewData[,-c(2,7,8,9)],mean)
sapply(NewData[,-c(2,7,8,9)],sd)
library(MASS)
dataset = Boston
dataset = Boston
pairs(Boston)
names(Boston)
pairs(~crim +zn+Indus+chas,Boston)
pairs(~crim +zn+indus+chas,Boston)
pairs(~crim+indus+chas,Boston)
View(dataset)
dataset$chas = as.factor(dataset$chas)
pairs(~crim+indus+chas,Boston)
plot(y= dataset$crim,x = dataset$chas)
pairs(~crim+indus+chas,Boston)
var(dataset$chas[dataset$cas == 1])
var(dataset$chas)
var(dataset$crim)
pairs(~crim+indus+chas,Boston)
plot(y= dataset$crim,x = dataset$indus)
View(dataset)
View(dataset)
View(dataset)
identify(crim,indus,row)
plot(y= dataset$crim,x = dataset$indus)
identify(dataset$crim,dataset$indus,row)
identify(dataset$crim,dataset$indus,dataset$indus)
names(dataset)
pairs(~crim+nox+rm,Boston)
pairs(~crim+age+dis,Boston)
plot(y= dataset$crim,x = dataset$dis)
pairs(~crim+rad+tax,Boston)
plot(y= dataset$crim,x = dataset$rad)
pairs(~crim+rad+tax,Boston)
plot(y= dataset$crim,x = dataset$tax)
pairs(~crim+ptratio+black,Boston)
plot(y= dataset$crim,x = dataset$ptratio)
plot(y= dataset$crim,x = dataset$black)
plot(y= dataset$crim,x = dataset$black)
pairs(~crim+medv+lstat,Boston)
plot(y= dataset$crim,x = dataset$medv)
plot(y= dataset$crim,x = dataset$lstat)
plot(y= dataset$crim,x = dataset$zn)
plot(y= dataset$crim,x = dataset$indus)
plot(y= dataset$crim,x = dataset$tax)
plot(y= dataset$indus,x = dataset$tax)
plot(y= dataset$zn,x = dataset$tax)
sapply(dataset,range)
sapply(dataset[1:2,],range)
sapply(dataset[1,],range)
sapply(dataset[,1],range)
sapply(dataset[,1:10],range)
sapply(dataset[,1],range)
range(dataset$crim)
sapply(dataset[,1],range)
sapply(dataset[,c(1)],range)
sapply(dataset$crim,range)
lapply(dataset$crim,range)
dim(subset(Boston, chas == 1))
median(CharlesRiver)
CharlesRiver = subset(Boston, chas == 1))
CharlesRiver = subset(Boston, chas == 1)
median(CharlesRiver)
median(CharlesRiver$ptratio)
median(dataset$ptratio)
median(CharlesRiver$ptratio)
hist(Boston$crim[Boston$crim>1], breaks=25)
hist(Boston$crim, breaks=25)
hist(Boston$crim[Boston$crim<15], breaks=25)
hist(Boston$crim[Boston$crim<15 & Boston$crim>0], breaks=25)
hist(Boston$crim[Boston$crim<15 & Boston$crim>0], breaks=15)
hist(Boston$crim[Boston$crim<20 & Boston$crim>15], breaks=15)
hist(Boston$crim[Boston$crim<40 & Boston$crim>20], breaks=15)
hist(Boston$crim[Boston$crim<80 & Boston$crim>40], breaks=15)
hist(Boston$ptratio, breaks=25)
subset(dataset,dataset$medv == min(dataset$medv))
summary(MinMedV)
MinMedV=subset(dataset,dataset$medv == min(dataset$medv))
summary(MinMedV)
MaxRooms=subset(dataset,dataset$rm >= 7)
MaxRooms=subset(dataset,dataset$rm >= 8)
summary(MaxRooms)
sapply(dataset[,-c(2,7,8,9)],range)
sapply(dataset[,1],range)
sapply(dataset[,2],range)
sapply(dataset[,-c(2,7,8,9)],range) #sapply applies function over a list or vector
#Chapter 2 - Exercises part 2
dataset = read.table("Auto.Data",header = TRUE, na.strings = "?")
#in dataset with missing values, there are ways to deal with these kind of error, one is simply omit them
dataset = na.omit(dataset)
# three qualitative data, 5 quantitative data
sapply(dataset[,-c(2,7,8,9)],range)
library(MASS)
dataset = Boston
sapply(dataset[,2],range)
sapply(dataset[1,2],range)
sapply(dataset$crim,range)
sapply(dataset[,1],range)
lapply(dataset[,1],range)
range(dataset$crim)
#Chapter 2 - Exercises part 2
dataset = read.table("Auto.Data",header = TRUE, na.strings = "?")
#in dataset with missing values, there are ways to deal with these kind of error, one is simply omit them
dataset = na.omit(dataset)
# Chapter 2 - Exercises part 3
library(MASS)
dataset = Boston
dataset$chas = as.factor(dataset$chas)
range(dataset$crim)
dbinom(0,6,0.7)
dbinom(6,6,0.7)
pbinom(1,6,0.7)
pbinom
0.3^3+6*0.7*0.3^5
0.3^6+6*0.7*0.3^5
ppois(2,0.3)
ppois(10,0.3)
ppois(11,0.3)
ppois(4,0.3)
dpois(2,0.3)
LanzaMonedas = sample(0:1,30,replace = TRUE)
LanzaMonedas = sample(0:1,30,replace = TRUE)
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
P1 = Sim1(1:100)
Sim1 = LanzaMonedas(1000)
P1 = Sim1(1:100)
P1 = Sim1[1:100]
P1 = Sim1[1:100 & Sim1 == 1]
P1 = Sim1[Sim1[1:100] == 1]
P1 = Sim1[[1:100] == 1]
P1 = Sim1[1:100]
P1 = Vec1[Vec1 == 1]
Vec1 = Sim1[1:100]
P1 = Vec1[Vec1 == 1]
P1 = dim(Vec1[Vec1 == 1])/100
Vec1 = Sim1[1:100]
P1 = dim(Vec1[Vec1 == 1])/100
P1
P1 = dim(Vec1[Vec1 == 1])/100
P1 = dim(Vec1[Vec1 == 1])
P1 = Vec1[Vec1 == 1]
P1 = dim(P1)
P1 = size(Vec1[Vec1 == 1])
P1 = length((Vec1[Vec1 == 1])
P1 = length((Vec1[Vec1 == 1])
P1 = length(Vec1[Vec1 == 1])
P1
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1])
Vec1 = Sim1[1:100]
hist(x = Vec1,breaks = 1c(0,0.5,1),probability = TRUE)
hist(x = Vec1,breaks = c(0,0.5,1),probability = TRUE)
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Vec1 = Sim1[1:100]
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
Vec1 = split(Sim1,100)
View(Vec1)
View(Vec1)
Vec1 = split(Sim1,10)
Vec1
Vec1 = split(Sim1,1)
Vec1
Vec1 = split(Sim1,ceiling(seq_along(Sim1/100)))
View(Vec1)
Vec1 = split(Sim1,ceiling(seq_along(Sim1/10)))
Vec1 = split(Sim1,ceiling(seq_along(Sim1/10)))
Vec1$`1`
Vec1$`2`
Vec1$`3`
Vec1 = split(Sim1,ceiling(seq_along(Sim1/100)))
Vec1
Vec1$`10`
x <- seq_along(Sim1)
Groups = 100
Sep = x/Groups
Listas = split(Sim1, ceiling(x/Groups))
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Sim1 = LanzaMonedas(1000)
Groups = 100
x <- seq_along(Sim1)
Listas = split(Sim1, ceiling(x/Groups))
P1 = length(Vec1[Vec1 == 1]) - 1/2
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
View(Listas)
Y = ceiling(x/Groups)
Y
P1 = sapply(Listas,length(Listas[Listas == 1]) - 1/2)
Listas = split(Sim1, ceiling(x/Groups))
lapply
P1 = sapply(Listas,length)
P1 = sapply(Listas,function(n) length(List$n))
P1 = sapply(Listas,function(n) length(Listas$n))
P!
P1
P1 = sapply(Listas,function(n) length(Listas))
P1
P1 = sapply(Listas,function(n) Listas[1:n])
P1 = sapply(Listas,Listas[Listas == 1])
P1 = sapply(Listas,Listas[Listas == 1])
P1 = sapply(Listas,Listas == 1)
P1 = vapply(Listas,Listas == 1)
P1 = vapply(Listas,sum)
P1 = lapply(Listas,sum)
P1
P1 = lapply(Listas,function(n) sum(n)/length(n))
P1
P1 = lapply(Listas,function(n) length(n[n== 0]))
P1
P1 = lapply(Listas,function(n) length(n[n== 1]))
P1 = lapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
data.frame
Listas = data.frame(split(Sim1, ceiling(x/Groups)),nrow = Groups,byrow = TRUE)
View(Listas)
View(Listas)
Listas = data.frame(split(Sim1, ceiling(x/Groups)))
View(Listas)
P1 = sapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
P1
P1 = sapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
P2 = sapply(Listas,function(n) length(n[n== 1])-Groups/2)
P1
P2
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Total = 10000
Sim1 = LanzaMonedas(Total)
Groups = 100
x <- seq_along(Sim1)
Listas = data.frame(split(Sim1, ceiling(x/Groups)))
P1 = sapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
P2 = sapply(Listas,function(n) length(n[n== 1])-Groups/2)
hist(x = Vec1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
hist(x = P1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Total = 10000
Sim1 = LanzaMonedas(Total)
Groups = 100
x <- seq_along(Sim1)
Listas = data.frame(split(Sim1, ceiling(x/Groups)))
P1 = sapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
P2 = sapply(Listas,function(n) length(n[n== 1])-Groups/2)
hist(x = P1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
P1
P2
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Total = 100000
Sim1 = LanzaMonedas(Total)
Groups = 100
x <- seq_along(Sim1)
Listas = data.frame(split(Sim1, ceiling(x/Groups)))
P1 = sapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
P2 = sapply(Listas,function(n) length(n[n== 1])-Groups/2)
hist(x = P1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
P1
P2
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Total = 100000
Sim1 = LanzaMonedas(Total)
Groups = 100
x <- seq_along(Sim1)
Listas = data.frame(split(Sim1, ceiling(x/Groups)))
P1 = sapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
P2 = sapply(Listas,function(n) length(n[n== 1])-Groups/2)
hist(x = P1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
length(P1[P1 == 0])
length(P2[P2 == 0])
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Total = 10000
Sim1 = LanzaMonedas(Total)
Groups = 100
x <- seq_along(Sim1)
Listas = data.frame(split(Sim1, ceiling(x/Groups)))
P1 = sapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
P2 = sapply(Listas,function(n) length(n[n== 1])-Groups/2)
hist(x = P1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
length(P1[P1 == 0])
length(P2[P2 == 0])
# Coin Toss
LanzaMonedas = function(n) sample(0:1,n,replace = TRUE)
Total = 10000000
Sim1 = LanzaMonedas(Total)
Groups = 100
x <- seq_along(Sim1)
Listas = data.frame(split(Sim1, ceiling(x/Groups)))
P1 = sapply(Listas,function(n) length(n[n== 1])/Groups-1/2)
P2 = sapply(Listas,function(n) length(n[n== 1])-Groups/2)
hist(x = P1,breaks = c(-0.5,0.5,1.5),probability = TRUE)
length(P1[P1 == 0])
length(P2[P2 == 0])
rm(list = ls())
#Concatenate, vector
x = c(1,3,2,5)
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R')
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R', echo=TRUE)
?seq
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R', echo=TRUE)
z = x^2
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R', echo=TRUE)
View(M)
View(M)
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R', echo=TRUE)
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R', echo=TRUE)
View(M)
View(M)
complete_subset
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R', echo=TRUE)
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R', echo=TRUE)
source('~/Introduction to Statistical Learning/Chapter 2/R_Training.R', echo=TRUE)
View(M_alea)
#Dimensions of a matrix
dim(M)
?par
search()
pairs(dataset)
source('~/Introduction to Statistical Learning/Chapter 2/R_training_3.R', echo=TRUE)
